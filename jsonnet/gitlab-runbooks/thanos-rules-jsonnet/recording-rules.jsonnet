local services = (import 'gitlab-metrics-config.libsonnet').monitoredServices;
local thresholds = import 'mwmbr/thresholds.libsonnet';
local recordingRules = import 'recording-rules/recording-rules.libsonnet';
local strings = import 'utils/strings.libsonnet';

local outputPromYaml(groups) =
  std.manifestYamlDoc({
    groups: groups,
  });

// Select all services with `autogenerateRecordingRules` (default on)
local selectedServices = std.filter(function(service) service.autogenerateRecordingRules, services);

local yamls = {
  'service-slos.yml':
    // The service SLO rules map SLOs to static recording rules,
    // for use in alerting, dashboards, etc
    local serviceSLOs = recordingRules.serviceSLORuleSetGenerator();

    // Component mappings are static recording rules which help
    // determine whether a component is being monitored. This helps
    // prevent spurious alerts when a component is decommissioned.
    local serviceMapping = recordingRules.serviceMappingRuleSetGenerator();
    local componentMappingRuleSetGenerator = recordingRules.componentMappingRuleSetGenerator();

    outputPromYaml([{
      name: 'Autogenerated Service SLOs',
      interval: '5m',
      partial_response_strategy: 'warn',
      rules:
        std.flatMap(
          function(serviceDefinition)
            serviceSLOs.generateRecordingRulesForService(serviceDefinition),
          selectedServices
        )
        +
        std.flatMap(
          function(serviceDefinition)
            serviceMapping.generateRecordingRulesForService(serviceDefinition),
          selectedServices
        )
        +
        std.flatMap(
          function(serviceDefinition)
            componentMappingRuleSetGenerator.generateRecordingRulesForService(serviceDefinition),
          selectedServices
        ),
    }]),
};

std.foldl(
  function(result, threshold)
    local filename = '%(name)s-health.yml' % { name: threshold.name };
    local content = outputPromYaml([{
      name: 'Autogenerated %(name)s Health Indicators' % {
        name: strings.capitalizeFirstLetter(threshold.name),
      },
      interval: '1m',
      partial_response_strategy: 'warn',
      rules: recordingRules.thresholdHealthRuleSet(threshold),
    }]);
    result { [filename]: content }
  , thresholds.knownOtherThresholds, yamls
)
