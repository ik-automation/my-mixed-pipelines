// This file is autogenerated using scripts/update_stage_groups_dashboards.rb
// Please feel free to customize this file.
local stageGroupDashboards = import './stage-group-dashboards.libsonnet';
local grafana = import 'github.com/grafana/grafonnet-lib/grafonnet/grafana.libsonnet';
local basic = import 'grafana/basic.libsonnet';
local layout = import 'grafana/layout.libsonnet';
local buildsQueueGraphs = import 'stage-groups/verify-continuous-integration/builds_queue_graphs.libsonnet';
local dashboardFilters = import 'stage-groups/verify-continuous-integration/dashboard_filters.libsonnet';

stageGroupDashboards.dashboard('pipeline_execution')
.addTemplate(dashboardFilters.runnerTypeTemplate())
.addPanel(
  grafana.row.new(title='Metrics for build logs'),
  gridPos={ x: 0, y: 1000, w: 24, h: 1 }
)
.addPanels(
  layout.grid([
    grafana.text.new(
      title='Understanding metrics for CI/CD build logs',
      mode='markdown',
      content=|||
        These panels show basic metrics for CI/CD build logs.

        You can read more about what each individual operation (like `streamed`,
        `chunks_invalid_size`) means by looking at the definition of these metrics in
        [gitlab/trace/metrics.rb][metrics-definition] file.

        The key metrics for build logs here are `chunks_invalid_size` and
        `archive_invalid_checksum`. These should be 0, anything more than zero
        indicates problems.

        Rate of `streamed` events should correspond with `PATCH /api/jobs/:id/trace`
        requests rate.

        It is expected to see some `chunks_invalid_checksum` build logs on these graphs. A significant
        increase over time might indicate a problem with the correctness of build logs.

        [metrics-definition]: https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/trace/metrics.rb#L9
      |||
    ),
    basic.timeseries(
      title='Rate of build logs streamed',
      description='The total rate of partial build logs received by that were sent by runners',
      query=|||
        sum(
          rate(
            gitlab_ci_trace_operations_total{
              environment="$environment",
              stage="$stage",
              operation="streamed",
            }[$__interval]
          )
        ) by (operation)
      |||,
      legendFormat='build logs {{ operation }} by runners',
      yAxisLabel='Rate per second',
    ),
    basic.timeseries(
      title='All operation metrics for build logs',
      description='The rate of different operations happening related to build logs',
      query=|||
        sum(
          rate(
            gitlab_ci_trace_operations_total{
              environment="$environment",
              stage="$stage"
            }[$__interval]
          )
        ) by (operation)
      |||,
      legendFormat='{{ operation }} operation',
      yAxisLabel='Rate per second',
    ),
    basic.timeseries(
      title='Throughput of build logs processing',
      description='Rate of build logs received from the runners in bytes',
      query=|||
        sum(
          rate(
            gitlab_ci_trace_bytes_total{
              environment="$environment",
              stage="$stage"
            }[$__interval]
          )
        )
      |||,
      format='Bps',
      legendFormat='build logs received',
      yAxisLabel='Bytes received per second',
    ),
    basic.timeseries(
      title='All error metrics for build logs',
      description='The rate of different errors related to processing build logs',
      query=|||
        sum(
          rate(
            gitlab_ci_build_trace_errors_total{
              environment="$environment",
              stage="$stage"
            }[$__interval]
          )
        ) by (error_reason)
      |||,
      legendFormat='{{ error_reason }} error reason',
      yAxisLabel='Rate per second',
    ),
  ], cols=2, startRow=1001)
)
.addPanel(
  grafana.row.new(title='Metrics for builds queuing'),
  gridPos={ x: 0, y: 1100, w: 24, h: 1 }
)
.addPanels(
  layout.grid([
    grafana.text.new(
      title='Metrics for CI/CD build queuing',
      mode='markdown',
      content=|||
        Panels available here show detailed metrics for CI/CD build queuing mechanisms.
      |||
    ),
    basic.timeseries(
      title='Rate of builds queue operations',
      description='The rate of various operations related to builds queuing.',
      query=|||
        sum(
          rate(
            gitlab_ci_queue_operations_total{
              environment="$environment",
              stage="$stage",
            }[$__interval]
          )
        ) by (operation)
      |||,
      legendFormat='queuing operation {{ operation }}',
      yAxisLabel='Rate per second',
    ),
    basic.timeseries(
      title='Rate of builds queuing results',
      description='Rate of builds queuing results per second.',
      query=|||
        sum(
          rate(
            gitlab_ci_queue_depth_total_count{
              environment="$environment",
              stage="$stage"
            }[$__interval]
          )
        ) by (queue)
      |||,
      legendFormat='queuing result {{ queue }}',
      yAxisLabel='Rate per second',
    ),
    buildsQueueGraphs.bigQueryDuration(),
    basic.multiTimeseries(
      stableId='builds-queue-size',
      title='Size of the builds queue per runner type',
      queries=[{
        query: |||
          histogram_quantile(
            0.50,
            sum(
              rate(
                gitlab_ci_queue_size_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, runner_type)
          )
        |||,
        legendFormat: 'queue size for {{ runner_type }} runner - p50',
      }, {
        query: |||
          histogram_quantile(
            0.90,
            sum(
              rate(
                gitlab_ci_queue_size_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, runner_type)
          )
        |||,
        legendFormat: 'queue size for {{ runner_type }} runner - p90',
      }, {
        query: |||
          histogram_quantile(
            0.99,
            sum(
              rate(
                gitlab_ci_queue_size_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, runner_type)
          )
        |||,
        legendFormat: 'queue size for {{ runner_type }} runner - p99',
      }],
    ),
    basic.multiTimeseries(
      stableId='builds-queue-depth',
      title='Depth of the builds queue per queuing result',
      queries=[{
        query: |||
          histogram_quantile(
            0.50,
            sum(
              rate(
                gitlab_ci_queue_depth_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, queue)
          )
        |||,
        legendFormat: 'queue depth for {{ queue }} result - p50',
      }, {
        query: |||
          histogram_quantile(
            0.90,
            sum(
              rate(
                gitlab_ci_queue_depth_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, queue)
          )
        |||,
        legendFormat: 'queue depth for {{ queue }} result - p90',
      }, {
        query: |||
          histogram_quantile(
            0.99,
            sum(
              rate(
                gitlab_ci_queue_depth_total_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, queue)
          )
        |||,
        legendFormat: 'queue depth for {{ queue }} result - p99',
      }],
    ),
  ], cols=2, startRow=1101)
)
.addPanel(
  grafana.row.new(title='Metrics for pipeline creation'),
  gridPos={ x: 0, y: 1200, w: 24, h: 1 }
)
.addPanels(
  layout.grid([
    grafana.text.new(
      title='Metrics for CI/CD pipeline creation',
      mode='markdown',
      content=|||
        Panels available here show detailed metrics for CI/CD pipeline creation.
      |||
    ),
    basic.timeseries(
      title='Aggregated rate of pipelines created',
      description='The aggregated rate of pipeline creation.',
      query=|||
        sum(
          rate(
            pipelines_created_total{
              environment="$environment",
              stage="$stage",
            }[$__interval]
          )
        )
      |||,
      yAxisLabel='Rate per second',
    ),
    basic.timeseries(
      title='Rate of pipeline creation by pipeline source',
      description='Rate of pipeline creation by pipeline source.',
      query=|||
        sum(
          rate(
            pipelines_created_total{
              environment="$environment",
              stage="$stage"
            }[$__interval]
          )
        ) by (source)
      |||,
      legendFormat='Pipeline source {{ source }}',
      yAxisLabel='Rate per second',
    ),
    basic.multiTimeseries(
      stableId='pipeline-creation-duration',
      title='Duration of the pipeline creation chain',
      queries=[{
        query: |||
          histogram_quantile(
            0.50,
            sum(
              rate(
                gitlab_ci_pipeline_creation_duration_seconds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le)
          )
        |||,
        legendFormat: 'pipeline creation duration - p50',
      }, {
        query: |||
          histogram_quantile(
            0.90,
            sum(
              rate(
                gitlab_ci_pipeline_creation_duration_seconds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le)
          )
        |||,
        legendFormat: 'pipeline creation duration - p90',
      }, {
        query: |||
          histogram_quantile(
            0.99,
            sum(
              rate(
                gitlab_ci_pipeline_creation_duration_seconds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le)
          )
        |||,
        legendFormat: 'pipeline creation duration - p99',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-creation-step-duration-p50',
      title='Duration of each pipeline creation step (p50)',
      queries=[{
        query: |||
          histogram_quantile(
             0.50,
             sum by (step, le) (pipeline_creation_step_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p50',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-creation-step-duration-p90',
      title='Duration of each pipeline creation step (p90)',
      queries=[{
        query: |||
          histogram_quantile(
             0.90,
             sum by (step, le) (pipeline_creation_step_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p90',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-creation-step-duration-p99',
      title='Duration of each pipeline creation step (p99)',
      queries=[{
        query: |||
          histogram_quantile(
             0.99,
             sum by (step, le) (pipeline_creation_step_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p99',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-scoped-variables-duration-p50',
      title='Duration of scoped variables calculation (p50)',
      queries=[{
        query: |||
          histogram_quantile(
             0.50,
             sum by (step, le) (pipeline_builder_scoped_variables_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p50',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-scoped-variables-duration-p90',
      title='Duration of scoped variables calculation(p90)',
      queries=[{
        query: |||
          histogram_quantile(
             0.90,
             sum by (step, le) (pipeline_builder_scoped_variables_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p90',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-scoped-variables-duration-p99',
      title='Duration of scoped variables calculation (p99)',
      queries=[{
        query: |||
          histogram_quantile(
             0.99,
             sum by (step, le) (pipeline_builder_scoped_variables_duration_bucket:le_step:rate1m{env="$environment", stage="$stage"})
          )
        |||,
        legendFormat: '{{ step }} duration - p99',
      }],
      format='s',
    ),
    basic.multiTimeseries(
      stableId='pipeline-size',
      title='Pipeline size by pipeline source',
      queries=[{
        query: |||
          histogram_quantile(
            0.50,
            sum(
              rate(
                gitlab_ci_pipeline_size_builds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, source)
          )
        |||,
        legendFormat: 'pipeline size for {{ source }} source - p50',
      }, {
        query: |||
          histogram_quantile(
            0.90,
            sum(
              rate(
                gitlab_ci_pipeline_size_builds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, source)
          )
        |||,
        legendFormat: 'pipeline size for {{ source }} pipeline - p90',
      }, {
        query: |||
          histogram_quantile(
            0.99,
            sum(
              rate(
                gitlab_ci_pipeline_size_builds_bucket{
                  environment="$environment",
                  stage="$stage"
                }[$__interval]
              )
            ) by (le, source)
          )
        |||,
        legendFormat: 'pipeline size for {{ source }} source - p99',
      }],
    ),
  ], cols=2, startRow=1201)
)
.addPanel(
  grafana.row.new(title='Metrics for pipeline processing'),
  gridPos={ x: 0, y: 1400, w: 24, h: 1 }
)
.addPanels(
  layout.grid([
    grafana.text.new(
      title='Metrics for CI/CD pipeline processing',
      mode='markdown',
      content=|||
        Panels available here show detailed metrics for CI/CD pipeline processing.
      |||
    ),
    basic.timeseries(
      title='Rate of pipelines processing events',
      description='Rate of pipeline processing events.',
      query=|||
        sum(
          rate(
            gitlab_ci_pipeline_processing_events_total{
              environment="$environment",
              stage="$stage",
            }[$__interval]
          )
        )
      |||,
      yAxisLabel='Rate per second',
    ),
  ], cols=2, startRow=1401)
)
.addPanels(
  layout.rowGrid(
    'Metrics for pipeline and jobs failures',
    [
      basic.timeseries(
        title='Pipeline Failure Reasons',
        description='Rate of pipeline failure reasons.',
        legendFormat='{{ reason }}',
        query=|||
          sum(
            rate(
              gitlab_ci_pipeline_failure_reasons{
                environment="$environment",
                stage="$stage",
              }[$__interval]
            )
          ) by (reason)
        |||,
      ),
      basic.timeseries(
        title='Job Failure Reasons',
        description='Rate of job failure reasons.',
        legendFormat='{{ reason }}',
        query=|||
          sum(
            rate(
              gitlab_ci_job_failure_reasons{
                environment="$environment",
                stage="$stage",
              }[$__interval]
            )
          ) by (reason)
        |||,
      ),
    ],
    startRow=1500
  )
)
.stageGroupDashboardTrailer()
